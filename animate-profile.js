require('dotenv').config();

const fs = require('fs');
const path = require('path');
const SteamUser = require('steam-user');
const SteamCommunity = require('steamcommunity');
const SteamTotp = require('steam-totp');
const cheerio = require('cheerio');
const readline = require('readline');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.STEAM_LOGIN || !process.env.STEAM_PASSWORD) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª:');
  console.error('STEAM_LOGIN, STEAM_PASSWORD');
  process.exit(1);
}

const ACCOUNT_NAME = process.env.STEAM_LOGIN;
const PASSWORD = process.env.STEAM_PASSWORD;
const SHARED_SECRET = process.env.STEAM_SHARED_SECRET;
const UPDATE_INTERVAL = parseInt(process.env.UPDATE_INTERVAL_MS, 10) || 3600000;
const SENTRY_PATH = path.resolve(__dirname, 'sentry.bin');

const client = new SteamUser({
  sentry: fs.existsSync(SENTRY_PATH)
    ? fs.readFileSync(SENTRY_PATH)
    : null
});
const community = new SteamCommunity();

let loginAttempt = 0;
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –ë–∞–∑–∞ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑
const HOURLY_PHRASES = [
  "–¢—Å—Å—Å... –ù–æ—á—å –Ω–∞ –¥–≤–æ—Ä–µ! –°–ø—è—Ç –≤—Å–µ, –∫—Ä–æ–º–µ —Ö–∞—Ä–¥–∫–æ—Ä–Ω—ã—Ö –≥–µ–π–º–µ—Ä–æ–≤ üåô",
  "–ó–≤–µ–∑–¥—ã –≥–æ—Ä—è—Ç —è—Ä–∫–æ, –∞ —Ç–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä - –µ—â–µ —è—Ä—á–µ! ‚ú®",
  "–ù–æ—á–Ω–æ–π –ø–∞—Ç—Ä—É–ª—å Steam –Ω–∞ –º–µ—Å—Ç–µ! ü¶â",
  "–ö–æ—Ñ–µ–∏–Ω–æ–≤–∞—è –∫–∞–ø–µ–ª—å–Ω–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞... –ù–æ—á—å-–¥–µ–Ω—å-–Ω–æ—á—å! ‚òï",
  "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–µ—Ä–≤—ã–π –≤—Ä–∞–≥ –ø–æ–≤–µ—Ä–∂–µ–Ω? ‚òÄÔ∏è",
  "–£—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—Ñ–µ –∏ Steam News - –ª—É—á—à–∏–π –∑–∞–≤—Ç—Ä–∞–∫! üì∞",
  "–°–æ–ª–Ω—Ü–µ –≤—Å—Ç–∞–µ—Ç, –∞ —Ç—ã –≤—Å–µ –≤ –∏–≥—Ä–µ? –í–æ—Å—Ö–∏—â–∞—é—Å—å! üòé",
  "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã —Å–ø—è—Ç? –ö–∞–∫–æ–π –µ—â–µ —Å–æ–Ω? üíª",
  "–î–µ–Ω—å –≤ —Ä–∞–∑–≥–∞—Ä–µ! –°–∫–æ–ª—å–∫–æ FPS –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ —Å–µ–≥–æ–¥–Ω—è? üöÄ",
  "–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ = 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–µ—Ä–µ–∫—É—Å + 55 –º–∏–Ω—É—Ç –Ω–∞ –∏–≥—Ä—É üçî",
  "–†–∞–±–æ—Ç–∞ –º–æ–∂–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å, —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞ –≤ Steam - –Ω–µ—Ç! üõí",
  "–ü–æ—Å–ª–µ–ø–æ–ª—É–¥–µ–Ω–Ω—ã–π –∑–Ω–æ–π... –ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ö–æ—Ä—Ä–æ—Ä–æ–≤! üëª",
  "–í–µ—á–µ—Ä –Ω–∞—Å—Ç–∞–ª! –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–∞ —Å –¥—Ä—É–∑—å—è–º–∏ üë•",
  "–°—É–º–µ—Ä–∫–∏ - –≥—Ä–∞–Ω—å –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –º–∏—Ä–æ–º üåÜ",
  "–õ—É–Ω–∞ —Å–º–µ–Ω–∏–ª–∞ —Å–æ–ª–Ω—Ü–µ, –∞ —Ç—ã –≤—Å–µ –≤ –±–∏—Ç–≤–µ? –ë–æ–µ—Ü! ‚öîÔ∏è",
  "–ü–æ—Ä–∞ –±—ã —Å–ø–∞—Ç—å... –ù–æ –≤—Å–µ–≥–æ –æ–¥–∏–Ω —Ä–∞—É–Ω–¥–∏–∫, –ø—Ä–∞–≤–¥–∞? üò¥"
];

function generateHourlyInfo() {
  const now = new Date();
  const hour = now.getHours();
  
  let period;
  if (hour < 6) period = "–Ω–æ—á—å";
  else if (hour < 12) period = "—É—Ç—Ä–æ";
  else if (hour < 18) period = "–¥–µ–Ω—å";
  else period = "–≤–µ—á–µ—Ä";
  
  const randomIndex = Math.floor(Math.random() * HOURLY_PHRASES.length);
  
  return `${HOURLY_PHRASES[randomIndex]} [${period} ${now.toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit'
  })}]`;
}

function doLogOn() {
  loginAttempt++;
  console.log(`‚Üí –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ #${loginAttempt}`);
  
  const logOnOptions = {
    accountName: ACCOUNT_NAME,
    password: PASSWORD,
    rememberPassword: true
  };
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å shared secret, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (SHARED_SECRET) {
    const authCode = SteamTotp.generateAuthCode(SHARED_SECRET);
    console.log(`‚úì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–∫–∏: ${authCode}`);
    logOnOptions.twoFactorCode = authCode;
  }
  
  client.logOn(logOnOptions);
}

client.on('steamGuard', (domain, callback, lastCodeWrong) => {
  const where = domain ? `–Ω–∞ e-mail *@${domain}` : '–º–æ–±–∏–ª—å–Ω—ã–π Authenticator';
  console.log(`‚Üí SteamGuard —Ç—Ä–µ–±—É–µ—Ç –∫–æ–¥ (${where})${lastCodeWrong ? ' ‚Äî –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±—ã–ª –Ω–µ–≤–µ—Ä–µ–Ω' : ''}`);
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å shared secret, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (SHARED_SECRET) {
    const code = SteamTotp.generateAuthCode(SHARED_SECRET);
    console.log(`‚Üí –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥: ${code}`);
    callback(code);
  } else {
    // –ò–Ω–∞—á–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
    rl.question('‚Ü≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Steam: ', (code) => {
      callback(code);
      rl.close();
    });
  }
});

client.on('sentry', sentryBytes => {
  try {
    fs.writeFileSync(SENTRY_PATH, sentryBytes);
    console.log('‚úì Sentry-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è sentry-—Ñ–∞–π–ª–∞:', e.message);
  }
});

client.on('loggedOn', () => {
  console.log('‚úì –ó–∞–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å –∫–∞–∫', client.steamID.getSteamID64());
  client.setPersona(SteamUser.EPersonaState.Online);
  client.webLogOn();
});

client.on('error', err => {
  console.error('Steam-–∫–ª–∏–µ–Ω—Ç –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É:', err.message || err);
  
  if (err.eresult === SteamUser.EResult.RateLimitExceeded || 
      err.eresult === SteamUser.EResult.AccountLoginDeniedThrottle) {
    const delay = Math.min(5 * 60 * 1000, loginAttempt * 60 * 1000);
    console.warn(`‚ö† RateLimit –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ (eresult=${err.eresult}). –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay/1000}s`);
    setTimeout(doLogOn, delay);
  } else if (err.eresult === SteamUser.EResult.InvalidLoginAuthCode) {
    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–∫–∏.');
    
    if (SHARED_SECRET) {
      console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.error('1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å SHARED_SECRET –≤ .env —Ñ–∞–π–ª–µ');
      console.error('2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      console.error('3. –ù–µ—Ç –ª–∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    console.log('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...');
    setTimeout(doLogOn, 10000);
  } else {
    console.log('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...');
    setTimeout(doLogOn, 30000);
  }
});

client.once('webSession', (sessionID, cookies) => {
  console.log('‚úì WebSession –ø–æ–ª—É—á–µ–Ω–∞');
  community.setCookies(cookies);
  community.sessionID = sessionID;

  const editUrl = `https://steamcommunity.com/profiles/${client.steamID.getSteamID64()}/edit`;
  community.httpRequestGet(editUrl, (err, res, body) => {
    if (err) {
      console.error('‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º—É –ø—Ä–æ—Ñ–∏–ª—è:', err);
      return;
    }
    
    const $ = cheerio.load(body);
    const settings = {};
    $('form#editForm').find('input, select, textarea').each((i, el) => {
      const name = $(el).attr('name');
      if (!name) return;
      settings[name] = $(el).val() || '';
    });
    
    console.log('‚úì –°—á–∏—Ç–∞–Ω—ã –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è:', Object.keys(settings));
    
    const updateProfile = () => {
      const newInfo = generateHourlyInfo();
      const newSettings = { ...settings, summary: newInfo };
      
      community.editProfile(newSettings, err => {
        if (err) {
          console.error('‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err.message || err);
        } else {
          console.log('‚úì –û–±–Ω–æ–≤–ª–µ–Ω–æ:', newInfo);
        }
      });
    };
    
    updateProfile();
    setInterval(updateProfile, UPDATE_INTERVAL);
    console.log(`‚Üª –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ ${UPDATE_INTERVAL/60000} –º–∏–Ω—É—Ç`);
  });
});

doLogOn();